-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.210000,HLS_SYN_LAT=6,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=18,HLS_SYN_FF=487,HLS_SYN_LUT=574,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_252 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln60_fu_264_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_reg_579 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_1_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_1_reg_584 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_4_fu_276_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_4_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_5_fu_280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_5_reg_595 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_434_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_reg_601 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_6_fu_294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_6_reg_606 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_612 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_8_fu_318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_8_reg_617 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_442_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_2_reg_623 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln60_4_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_4_reg_633 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_2_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_2_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_3_fu_356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_3_reg_658 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_7_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_7_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_9_fu_367_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_9_reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_11_fu_371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_11_reg_676 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_466_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_4_reg_682 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_12_fu_380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_12_reg_687 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_14_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_14_reg_693 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_473_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_6_reg_699 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln60_5_fu_391_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_5_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_10_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_10_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal sext_ln60_13_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_13_reg_720 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_8_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_10_reg_731 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_15_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_15_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_17_fu_413_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_17_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_518_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_12_reg_746 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_525_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_14_reg_751 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_552_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_17_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_450_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_458_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_480_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_487_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_506_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_512_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_539_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln60_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_1_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_242_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_2_fu_284_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_2_fu_284_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_2_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_308_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_5_fu_322_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_5_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_3_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_8_fu_375_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_8_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_11_fu_386_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_11_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_14_fu_402_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_14_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_17_fu_406_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_17_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_20_fu_416_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_20_fu_416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_23_fu_421_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_23_fu_421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_26_fu_430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln60_26_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_434_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_473_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_500_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_506_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_512_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_518_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_525_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln60_16_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_539_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_552_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrixmul_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_mulbkb_U1 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => trunc_ln60_1_fu_268_p1,
        din1 => grp_fu_434_p1,
        din2 => grp_fu_434_p2,
        dout => grp_fu_434_p3);

    matrixmul_mac_mulbkb_U2 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => trunc_ln60_2_fu_290_p1,
        din1 => grp_fu_442_p1,
        din2 => grp_fu_442_p2,
        dout => grp_fu_442_p3);

    matrixmul_mac_mulcud_U3 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_256,
        din1 => grp_fu_450_p1,
        din2 => add_ln60_reg_601,
        dout => grp_fu_450_p3);

    matrixmul_mac_mulcud_U4 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_7_reg_612,
        din1 => grp_fu_458_p1,
        din2 => add_ln60_2_reg_623,
        dout => grp_fu_458_p3);

    matrixmul_mac_mulbkb_U5 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => trunc_ln60_3_fu_363_p1,
        din1 => grp_fu_466_p1,
        din2 => grp_fu_466_p2,
        dout => grp_fu_466_p3);

    matrixmul_mac_mulbkb_U6 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_473_p0,
        din1 => trunc_ln60_4_reg_633,
        din2 => grp_fu_473_p2,
        dout => grp_fu_473_p3);

    matrixmul_mac_mulcud_U7 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_256,
        din1 => grp_fu_480_p1,
        din2 => add_ln60_4_reg_682,
        dout => grp_fu_480_p3);

    matrixmul_mac_mulcud_U8 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_487_p0,
        din1 => tmp_6_reg_638,
        din2 => add_ln60_6_reg_699,
        dout => grp_fu_487_p3);

    matrixmul_mac_mulbkb_U9 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_494_p0,
        din1 => grp_fu_494_p1,
        din2 => grp_fu_494_p2,
        dout => grp_fu_494_p3);

    matrixmul_mac_mulbkb_U10 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_500_p0,
        din1 => grp_fu_500_p1,
        din2 => grp_fu_500_p2,
        dout => grp_fu_500_p3);

    matrixmul_mac_mulcud_U11 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_506_p0,
        din1 => grp_fu_506_p1,
        din2 => add_ln60_8_reg_726,
        dout => grp_fu_506_p3);

    matrixmul_mac_mulcud_U12 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_512_p0,
        din1 => grp_fu_512_p1,
        din2 => add_ln60_10_reg_731,
        dout => grp_fu_512_p3);

    matrixmul_mac_mulbkb_U13 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_518_p0,
        din1 => grp_fu_518_p1,
        din2 => grp_fu_518_p2,
        dout => grp_fu_518_p3);

    matrixmul_mac_mulbkb_U14 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_525_p0,
        din1 => grp_fu_525_p1,
        din2 => grp_fu_525_p2,
        dout => grp_fu_525_p3);

    matrixmul_mac_mulcud_U15 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        din2 => add_ln60_12_reg_746,
        dout => grp_fu_532_p3);

    matrixmul_mac_mulcud_U16 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_539_p0,
        din1 => grp_fu_539_p1,
        din2 => add_ln60_14_reg_751,
        dout => grp_fu_539_p3);

    matrixmul_mac_mulbkb_U17 : component matrixmul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_546_p0,
        din1 => grp_fu_546_p1,
        din2 => grp_fu_546_p2,
        dout => grp_fu_546_p3);

    matrixmul_mac_mulcud_U18 : component matrixmul_mac_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_552_p0,
        din1 => grp_fu_552_p1,
        din2 => grp_fu_546_p3,
        dout => grp_fu_552_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln60_10_reg_731 <= grp_fu_500_p3;
                add_ln60_8_reg_726 <= grp_fu_494_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln60_12_reg_746 <= grp_fu_518_p3;
                add_ln60_14_reg_751 <= grp_fu_525_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln60_17_reg_756 <= grp_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln60_2_reg_623 <= grp_fu_442_p3;
                add_ln60_reg_601 <= grp_fu_434_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln60_4_reg_682 <= grp_fu_466_p3;
                add_ln60_6_reg_699 <= grp_fu_473_p3;
                tmp_11_reg_709 <= a_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_252 <= a_q0(15 downto 8);
                reg_256 <= b_q0(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                sext_ln60_10_reg_714 <= sext_ln60_10_fu_395_p1;
                sext_ln60_13_reg_720 <= sext_ln60_13_fu_399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sext_ln60_11_reg_676 <= sext_ln60_11_fu_371_p1;
                sext_ln60_12_reg_687 <= sext_ln60_12_fu_380_p1;
                sext_ln60_14_reg_693 <= sext_ln60_14_fu_383_p1;
                sext_ln60_2_reg_653 <= sext_ln60_2_fu_352_p1;
                sext_ln60_3_reg_658 <= sext_ln60_3_fu_356_p1;
                sext_ln60_7_reg_664 <= sext_ln60_7_fu_360_p1;
                sext_ln60_9_reg_670 <= sext_ln60_9_fu_367_p1;
                trunc_ln60_5_reg_704 <= trunc_ln60_5_fu_391_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                sext_ln60_15_reg_736 <= sext_ln60_15_fu_410_p1;
                sext_ln60_17_reg_741 <= sext_ln60_17_fu_413_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sext_ln60_1_reg_584 <= sext_ln60_1_fu_272_p1;
                sext_ln60_4_reg_590 <= sext_ln60_4_fu_276_p1;
                sext_ln60_5_reg_595 <= sext_ln60_5_fu_280_p1;
                sext_ln60_6_reg_606 <= sext_ln60_6_fu_294_p1;
                sext_ln60_8_reg_617 <= sext_ln60_8_fu_318_p1;
                sext_ln60_reg_579 <= sext_ln60_fu_264_p1;
                tmp_6_reg_638 <= a_q1(15 downto 8);
                tmp_7_reg_612 <= b_q1(15 downto 8);
                tmp_9_reg_643 <= a_q1(23 downto 16);
                trunc_ln60_4_reg_633 <= trunc_ln60_4_fu_328_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                a_address0 <= "XX";
            end if;
        else 
            a_address0 <= "XX";
        end if; 
    end process;

    a_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_address0 <= "XX";
            end if;
        else 
            b_address0 <= "XX";
        end if; 
    end process;

    b_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_232_p4 <= a_q0(23 downto 16);
    grp_fu_242_p4 <= b_q0(23 downto 16);
    grp_fu_434_p1 <= sext_ln60_fu_264_p1(8 - 1 downto 0);
    grp_fu_434_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_2_fu_284_p0) * signed(mul_ln60_2_fu_284_p1))), 16));
    grp_fu_442_p1 <= sext_ln60_fu_264_p1(8 - 1 downto 0);
    grp_fu_442_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_5_fu_322_p0) * signed(mul_ln60_5_fu_322_p1))), 16));
    grp_fu_450_p1 <= sext_ln60_2_fu_352_p1(8 - 1 downto 0);
    grp_fu_458_p1 <= sext_ln60_2_fu_352_p1(8 - 1 downto 0);
    grp_fu_466_p1 <= sext_ln60_reg_579(8 - 1 downto 0);
    grp_fu_466_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_8_fu_375_p0) * signed(mul_ln60_8_fu_375_p1))), 16));
    grp_fu_473_p0 <= sext_ln60_1_reg_584(8 - 1 downto 0);
    grp_fu_473_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_11_fu_386_p0) * signed(mul_ln60_11_fu_386_p1))), 16));
    grp_fu_480_p1 <= sext_ln60_2_reg_653(8 - 1 downto 0);
    grp_fu_487_p0 <= sext_ln60_3_reg_658(8 - 1 downto 0);
    grp_fu_494_p0 <= sext_ln60_6_reg_606(8 - 1 downto 0);
    grp_fu_494_p1 <= sext_ln60_12_reg_687(8 - 1 downto 0);
    grp_fu_494_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_14_fu_402_p0) * signed(mul_ln60_14_fu_402_p1))), 16));
    grp_fu_500_p0 <= sext_ln60_9_reg_670(8 - 1 downto 0);
    grp_fu_500_p1 <= sext_ln60_12_reg_687(8 - 1 downto 0);
    grp_fu_500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_17_fu_406_p0) * signed(mul_ln60_17_fu_406_p1))), 16));
    grp_fu_506_p0 <= sext_ln60_7_reg_664(8 - 1 downto 0);
    grp_fu_506_p1 <= sext_ln60_13_reg_720(8 - 1 downto 0);
    grp_fu_512_p0 <= sext_ln60_10_reg_714(8 - 1 downto 0);
    grp_fu_512_p1 <= sext_ln60_13_reg_720(8 - 1 downto 0);
    grp_fu_518_p0 <= sext_ln60_1_reg_584(8 - 1 downto 0);
    grp_fu_518_p1 <= sext_ln60_15_fu_410_p1(8 - 1 downto 0);
    grp_fu_518_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_20_fu_416_p0) * signed(mul_ln60_20_fu_416_p1))), 16));
    grp_fu_525_p0 <= sext_ln60_6_reg_606(8 - 1 downto 0);
    grp_fu_525_p1 <= sext_ln60_15_fu_410_p1(8 - 1 downto 0);
    grp_fu_525_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_23_fu_421_p0) * signed(mul_ln60_23_fu_421_p1))), 16));
    grp_fu_532_p0 <= sext_ln60_3_reg_658(8 - 1 downto 0);
    grp_fu_532_p1 <= sext_ln60_16_fu_426_p1(8 - 1 downto 0);
    grp_fu_539_p0 <= sext_ln60_7_reg_664(8 - 1 downto 0);
    grp_fu_539_p1 <= sext_ln60_16_fu_426_p1(8 - 1 downto 0);
    grp_fu_546_p0 <= sext_ln60_9_reg_670(8 - 1 downto 0);
    grp_fu_546_p1 <= sext_ln60_15_reg_736(8 - 1 downto 0);
    grp_fu_546_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_26_fu_430_p0) * signed(mul_ln60_26_fu_430_p1))), 16));
    grp_fu_552_p0 <= sext_ln60_10_reg_714(8 - 1 downto 0);
    grp_fu_552_p1 <= sext_ln60_16_fu_426_p1(8 - 1 downto 0);
    mul_ln60_11_fu_386_p0 <= sext_ln60_5_reg_595(8 - 1 downto 0);
    mul_ln60_11_fu_386_p1 <= tmp_9_reg_643;
    mul_ln60_14_fu_402_p0 <= sext_ln60_8_reg_617(8 - 1 downto 0);
    mul_ln60_14_fu_402_p1 <= sext_ln60_14_reg_693(8 - 1 downto 0);
    mul_ln60_17_fu_406_p0 <= sext_ln60_11_reg_676(8 - 1 downto 0);
    mul_ln60_17_fu_406_p1 <= sext_ln60_14_reg_693(8 - 1 downto 0);
    mul_ln60_20_fu_416_p0 <= sext_ln60_5_reg_595(8 - 1 downto 0);
    mul_ln60_20_fu_416_p1 <= sext_ln60_17_fu_413_p1(8 - 1 downto 0);
    mul_ln60_23_fu_421_p0 <= sext_ln60_8_reg_617(8 - 1 downto 0);
    mul_ln60_23_fu_421_p1 <= sext_ln60_17_fu_413_p1(8 - 1 downto 0);
    mul_ln60_26_fu_430_p0 <= sext_ln60_11_reg_676(8 - 1 downto 0);
    mul_ln60_26_fu_430_p1 <= sext_ln60_17_reg_741(8 - 1 downto 0);
    mul_ln60_2_fu_284_p0 <= grp_fu_242_p4;
    mul_ln60_2_fu_284_p1 <= sext_ln60_4_fu_276_p1(8 - 1 downto 0);
    mul_ln60_5_fu_322_p0 <= tmp_8_fu_308_p4;
    mul_ln60_5_fu_322_p1 <= sext_ln60_4_fu_276_p1(8 - 1 downto 0);
    mul_ln60_8_fu_375_p0 <= grp_fu_242_p4;
    mul_ln60_8_fu_375_p1 <= sext_ln60_4_reg_590(8 - 1 downto 0);

    res_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            res_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    res_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            res_address1 <= "XXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add_ln60_17_reg_756, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, grp_fu_458_p3, grp_fu_487_p3, grp_fu_512_p3, grp_fu_532_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            res_d0 <= add_ln60_17_reg_756;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_d0 <= grp_fu_532_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_d0 <= grp_fu_512_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_d0 <= grp_fu_487_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_d0 <= grp_fu_458_p3;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, grp_fu_450_p3, grp_fu_480_p3, grp_fu_506_p3, grp_fu_539_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_d1 <= grp_fu_539_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_d1 <= grp_fu_506_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_d1 <= grp_fu_480_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_d1 <= grp_fu_450_p3;
        else 
            res_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln60_10_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_256),16));

        sext_ln60_11_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_242_p4),16));

        sext_ln60_12_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_4_reg_633),16));

        sext_ln60_13_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_638),16));

        sext_ln60_14_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_643),16));

        sext_ln60_15_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_5_reg_704),16));

        sext_ln60_16_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_252),16));

        sext_ln60_17_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_709),16));

        sext_ln60_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_1_fu_268_p1),16));

        sext_ln60_2_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_252),16));

        sext_ln60_3_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_256),16));

        sext_ln60_4_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_232_p4),16));

        sext_ln60_5_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_242_p4),16));

        sext_ln60_6_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_2_fu_290_p1),16));

        sext_ln60_7_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_612),16));

        sext_ln60_8_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_308_p4),16));

        sext_ln60_9_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_3_fu_363_p1),16));

        sext_ln60_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln60_fu_260_p1),16));

    tmp_8_fu_308_p4 <= b_q1(23 downto 16);
    trunc_ln60_1_fu_268_p1 <= b_q0(8 - 1 downto 0);
    trunc_ln60_2_fu_290_p1 <= b_q1(8 - 1 downto 0);
    trunc_ln60_3_fu_363_p1 <= b_q0(8 - 1 downto 0);
    trunc_ln60_4_fu_328_p1 <= a_q1(8 - 1 downto 0);
    trunc_ln60_5_fu_391_p1 <= a_q0(8 - 1 downto 0);
    trunc_ln60_fu_260_p1 <= a_q0(8 - 1 downto 0);
end behav;
